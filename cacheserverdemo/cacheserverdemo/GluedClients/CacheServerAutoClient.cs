
/* Auto generated by Glue Client Compiler tool (gluec)
on 04.06.2017 19:47:20 at MSI by Ilya
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace CacheServer.Contracts.Services.GluedClients
{
  ///<summary>
  /// Client for glued contract CacheServer.Contracts.Services.ICacheServer server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class CacheServerAutoClient : ClientEndPoint, @CacheServer.@Contracts.@Services.@ICacheServer
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_AddOrGetExisiting_0;
     private static MethodSpec @s_ms_Remove_1;
     private static MethodSpec @s_ms_Get_2;
     private static MethodSpec @s_ms_Set_3;
     private static MethodSpec @s_ms_Contains_4;

     //static .ctor
     static CacheServerAutoClient()
     {
         var t = typeof(@CacheServer.@Contracts.@Services.@ICacheServer);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_AddOrGetExisiting_0 = new MethodSpec(t.GetMethod("AddOrGetExisiting", new Type[]{ typeof(@System.@String), typeof(@System.@Byte[]) }));
         @s_ms_Remove_1 = new MethodSpec(t.GetMethod("Remove", new Type[]{ typeof(@System.@String) }));
         @s_ms_Get_2 = new MethodSpec(t.GetMethod("Get", new Type[]{ typeof(@System.@String) }));
         @s_ms_Set_3 = new MethodSpec(t.GetMethod("Set", new Type[]{ typeof(@System.@String), typeof(@System.@Byte[]) }));
         @s_ms_Contains_4 = new MethodSpec(t.GetMethod("Contains", new Type[]{ typeof(@System.@String) }));
     }
  #endregion

  #region .ctor
     public CacheServerAutoClient(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public CacheServerAutoClient(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public CacheServerAutoClient(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public CacheServerAutoClient(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@CacheServer.@Contracts.@Services.@ICacheServer); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.AddOrGetExisiting'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Byte[]' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Byte[] @AddOrGetExisiting(@System.@String  @key, @System.@Byte[]  @value)
         {
            var call = Async_AddOrGetExisiting(@key, @value);
            return call.GetValue<@System.@Byte[]>();
         }

         ///<summary>
         /// Asynchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.AddOrGetExisiting'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_AddOrGetExisiting(@System.@String  @key, @System.@Byte[]  @value)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_AddOrGetExisiting_0, false, RemoteInstance, new object[]{@key, @value});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Remove'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Boolean' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Boolean @Remove(@System.@String  @key)
         {
            var call = Async_Remove(@key);
            return call.GetValue<@System.@Boolean>();
         }

         ///<summary>
         /// Asynchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Remove'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Remove(@System.@String  @key)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Remove_1, false, RemoteInstance, new object[]{@key});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Get'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Byte[]' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Byte[] @Get(@System.@String  @key)
         {
            var call = Async_Get(@key);
            return call.GetValue<@System.@Byte[]>();
         }

         ///<summary>
         /// Asynchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Get'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Get(@System.@String  @key)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Get_2, false, RemoteInstance, new object[]{@key});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Set'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public void @Set(@System.@String  @key, @System.@Byte[]  @value)
         {
            var call = Async_Set(@key, @value);
            call.CheckVoidValue();
         }

         ///<summary>
         /// Asynchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Set'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Set(@System.@String  @key, @System.@Byte[]  @value)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Set_3, false, RemoteInstance, new object[]{@key, @value});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Contains'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Boolean' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Boolean @Contains(@System.@String  @key)
         {
            var call = Async_Contains(@key);
            return call.GetValue<@System.@Boolean>();
         }

         ///<summary>
         /// Asynchronous invoker for  'CacheServer.Contracts.Services.ICacheServer.Contains'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Contains(@System.@String  @key)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Contains_4, false, RemoteInstance, new object[]{@key});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
